[
  {
    "name": "info",
    "type": "object",
    "description": "Your patcher module information.  You should use the `info` variable as the value here."
  },
  {
    "name": "gameModes",
    "type": "array of integer",
    "description": "Array of the game modes your patcher can be used with.  Game modes are defined in xelib's [gameModes enumeration](docs://Development/APIs/xelib/Setup)."
  },
  {
    "name": "settings",
    "type": "object",
    "description": "The patcher settings schema is used to register a settings tab for your patcher in the [manage patchers modal](docs://Modal Views/Manage Patchers Modal).",
    "items": [
      {
        "name": "label",
        "type": "string",
        "description": "The label used for the tab in the manage patchers modal."
      },
      {
        "name": "hide",
        "type": "boolean",
        "icons": ["optional"],
        "description": "Set to true to not display a settings tab in the manage patchers modal for your patcher."
      },
      {
        "name": "templateUrl",
        "type": "string",
        "description": "URL to the HTML template to use for the settings tab.  You'll want to use the `patcherUrl` global in this URL.  E.g. `${patcherUrl}/partials/settings.html`."
      },
      {
        "name": "controller",
        "type": "function",
        "icons": ["optional"],
        "description": "Controller function for use on the settings tab.  Can use dependency injection per AngularJS."
      },
      {
        "name": "defaultSettings",
        "type": "object",
        "description": "Object containing the default values for your patcher's settings.  Settings can be any type.  You should provide a default value for every setting your patcher supports."
      }
    ]
  },
  {
    "name": "requiredFiles",
    "type": "function",
    "icons": ["optional"],
    "args": [],
    "returns": {
      "type": "array of string"
    },
    "description": "Return an array of filenames which must be loaded for the patcher to run.  Your patcher will be disabled if any file from this array is not loaded.  Your patcher will also be disabled if a required file is loaded after the patch plugin the patcher has been assigned to."
  },
  {
    "name": "requiredFiles",
    "type": "array of string",
    "icons": ["optional"],
    "legacy": true,
    "description": "Legacy option to provide required files as an array directly."
  },
  {
    "name": "getFilesToPatch",
    "type": "function",
    "icons": ["optional"],
    "args": [{
      "name": "filenames",
      "type": "array of string",
      "description": "The filenames of all files available for your patcher to patch."
    }],
    "returns": {
      "type": "array of string"
    },
    "description": "Function which allows you to exclude certain files from patching.  The array of filenames you return from the function will be the base file selection used by the patcher.  You can use [Array.prototype.subtract](docs://Development/APIs/Polyfills) to remove files from the passed filenames array easily."
  },
  {
    "name": "execute",
    "type": "function",
    "args": [{
      "name": "patch",
      "type": "handle",
      "description": "Handle for the patch plugin your patcher is using."
    }, {
      "name": "helpers",
      "type": "object",
      "description": "Patcher helpers."
    }, {
      "name": "settings",
      "type": "object",
      "description": "Your patcher's settings."
    }, {
      "name": "locals",
      "type": "object",
      "description": "Patcher locals."
    }],
    "returns": {
      "type": "object",
      "description": "An Executor object."
    },
    "description": "This function gets called when your patcher is executed.  It should return an Executor object as described by the schema below.",
    "itemsLabel": "Executor",
    "items": [
      {
        "name": "customProgress",
        "type": "function",
        "icons": ["optional"],
        "args": [{
          "name": "filesToPatch",
          "type": "array of string",
          "description": "The filenames of the files the patcher will be run on."
        }],
        "returns": {
          "type": "number"
        },
        "description": "Provide a function here to manage the progress bar manually.  The function should return the max progress for the patcher."
      },
      {
        "name": "initialize",
        "type": "function",
        "icons": ["optional"],
        "args": [{
          "name": "patchFile",
          "type": "handle",
          "description": "Handle for the patch plugin your patcher is using."
        }, {
          "name": "helpers",
          "type": "object",
          "description": "Patcher helpers."
        }, {
          "name": "settings",
          "type": "object",
          "description": "Your patcher's settings."
        }, {
          "name": "locals",
          "type": "object",
          "description": "Patcher locals."
        }],
        "description": "Called before processing.  Perform anything that needs to be done at the beginning of the patcher's execution in this function.  This step is often used to load records which but need to be used in the patching process."
      },
      {
        "name": "process",
        "type": "array of object",
        "description": "Array of process blocks which are executed sequentially.  See the process block schema below for more information.",
        "itemsLabel": "Process Block Schema",
        "items": [
          {
            "name": "skip",
            "type": "function",
            "icons": ["optional"],
            "args": [],
            "returns": {
              "type": "boolean"
            },
            "description": "Skip function.  Called to determine whether or not the process block should be skipped.  Return true to skip the process block."
          },
          {
            "name": "load",
            "type": "object",
            "description": "Loaded records which pass `filter` will be copied to the patch plugin, and then passed to the `patch` function.",
            "itemsLabel": "Load Options Object",
            "items": [
              {
                "name": "signature",
                "type": "string",
                "description": "Record signature to load.  You can view record signatures by top level group names on the tree view and in record headers."
              },
              {
                "name": "overrides",
                "type": "boolean",
                "icons": ["optional"],
                "description": "Pass true to include override records.  Override records are not included by default."
              },
              {
                "name": "filter",
                "type": "function",
                "icons": ["optional"],
                "args": [{
                  "name": "record",
                  "type": "handle"
                }],
                "returns": {
                  "type": "boolean"
                },
                "description": "Filter function.  Called for each loaded record.  Return false to skip patching a record."
              }
            ]
          },
          {
            "name": "load",
            "type": "function",
            "legacy": true,
            "args": [{
              "name": "plugin",
              "type": "handle",
              "description": "Handle for the plugin to patch."
            }, {
              "name": "helpers",
              "type": "object",
              "description": "Patcher helpers."
            }, {
              "name": "settings",
              "type": "object",
              "description": "Your patcher's settings."
            }, {
              "name": "locals",
              "type": "object",
              "description": "Patcher locals."
            }],
            "returns": {
              "type": "object",
              "description": "A Load Options object."
            },
            "description": "Legacy support for using a function instead of providing a load options object directly.  Return null or undefined to skip loading records from a plugin, else return a load options object."
          },
          {
            "name": "records",
            "type": "function",
            "icons": ["optional"],
            "args": [{
              "name": "filesToPatch",
              "type": "array of handle",
              "description": "Array of file handles corresponding to the plugins being patched."
            }, {
              "name": "helpers",
              "type": "object",
              "description": "Patcher helpers."
            }, {
              "name": "settings",
              "type": "object",
              "description": "Your patcher's settings."
            }, {
              "name": "locals",
              "type": "object",
              "description": "Patcher locals."
            }],
            "returns": {
              "type": "array of handle",
              "description": "Array of records to patch."
            },
            "description": "A function which can be used instead of `load`.  The `records` function allows you to return a custom array of records to patch."
          },
          {
            "name": "patch",
            "type": "function",
            "icons": ["optional"],
            "args": [{
              "name": "record",
              "type": "handle",
              "description": "Handle for the patch record."
            }, {
              "name": "helpers",
              "type": "object",
              "description": "Patcher helpers."
            }, {
              "name": "settings",
              "type": "object",
              "description": "Your patcher's settings."
            }, {
              "name": "locals",
              "type": "object",
              "description": "Patcher locals."
            }],
            "description": "Called for each record copied to the patch plugin.  This is the step where you set values on the record."
          }
        ]
      },
      {
        "name": "finalize",
        "type": "function",
        "icons": ["optional"],
        "args": [{
          "name": "patchFile",
          "type": "handle",
          "description": "Handle for the patch plugin your patcher is using."
        }, {
          "name": "helpers",
          "type": "object",
          "description": "Patcher helpers."
        }, {
          "name": "settings",
          "type": "object",
          "description": "Your patcher's settings."
        }, {
          "name": "locals",
          "type": "object",
          "description": "Patcher locals."
        }],
        "description": "Called after processing.  Can be used to perform any cleanup/final steps once your patcher has finished executing.  Note that UPF automatically removes ITPO records and unused masters, so you don't need to do that here."
      }
    ]
  },
  {
    "name": "execute",
    "type": "object",
    "legacy": true,
    "description": "Legacy support for providing an Executor object directly instead of returning it from a function.  Using this format means you must access `patchFile`, `helpers`, `settings`, and `locals` from arguments passed to the `initialize`, `finalize`, `load`, and `patch` function calls.  This syntax is not recommended."
  }
]
